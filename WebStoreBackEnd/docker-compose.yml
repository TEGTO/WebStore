version: '3.4'

services:
  rabbitmq:
    container_name: "rabbitmq"
    image: rabbitmq:management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: "user1"
      RABBITMQ_DEFAULT_PASS: "12345"
    healthcheck:
        test: rabbitmq-diagnostics -q ping
        interval: 5s
        timeout: 5s
        retries: 5
        start_period: 5s
    networks:
      - backend-net
  db:
    container_name: webstore-db
    image: postgres
    restart: always
    ports:
      - "54303:5432"
    environment:
      POSTGRES_DB: "webstore-db"
      POSTGRES_USER: "user1"
      POSTGRES_PASSWORD: "12345"
    networks:
      - backend-net
    volumes:
      - webstore-db:/var/lib/postgresql/data

  authenticationwebapi:
    container_name: authenticationwebapi
    image: ${DOCKER_REGISTRY-}authenticationwebapi
    build:
      context: .
      dockerfile: AuthenticationWebApi/Dockerfile
    networks:
      - backend-net
    depends_on:
    - db
    - rabbitmq

  webstoreapi:
    container_name: webstoreapi
    image: ${DOCKER_REGISTRY-}webstoreapi
    build:
      context: .
      dockerfile: WebStoreApi/Dockerfile
    networks:
      - backend-net
    depends_on:
    - db
    - rabbitmq

  apigateway:
    container_name: apigateway
    image: ${DOCKER_REGISTRY-}apigateway
    build:
      context: .
      dockerfile: ApiGateway/ApiGateway/Dockerfile
    ports: 
      - 7129:8081
    networks:
      - backend-net
    depends_on:
    - authenticationwebapi
    - webstoreapi

  rabbitmqreceiver:
    container_name: rabbitmqreceiver
    image: ${DOCKER_REGISTRY-}rabbitmqreceiver
    build:
      context: .
      dockerfile: RabbitMQReceiver/Dockerfile
    networks:
      - backend-net
    depends_on:
      rabbitmq:
        condition: service_healthy

networks:
  backend-net:

volumes:
  webstore-db: